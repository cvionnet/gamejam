--local defmath = require("defmath.defmath")	-- to use https://github.com/subsoap/defmath
require("src.scripts.utils.utils")

local COLOR = { "gift_blue", "gift_green", "gift_red" }

go.property("position", vmath.vector3())
go.property("z_index", 0)		-- 1 = in back  2 = middle   3 = in front
go.property("colorID", 0)		-- BLUE = 1, GREEN = 2, RED = 3

go.property("swipe_to", vmath.vector3())
go.property("swipe_force", 10)

go.property("type", 0)		-- 1 = big   2 = middle   3 = small
go.property("isOnGround", true)
go.property("isGravityActive", true)

-------------------------------------------------------------------------------------------------------------

function init(self)
	--self.position = vmath.vector3(0)
	self.color = ""
--	self.type = 0

	self.velocity = vmath.vector3(0,-10,0)
	self.speed = 5
--	self.isGravityActive = true
--	self.isOnGround = true

	self.collisionResolving = vmath.vector3()

	CreateRandomGift(self)
end

function update(self, dt)
	if self.isGravityActive then
		self.position.x = self.position.x + self.velocity.x * self.speed * dt
		self.position.y = self.position.y + self.velocity.y * self.speed * dt

		go.set_position(self.position)
	end

	self.collisionResolving = vmath.vector3()
end

function on_message(self, message_id, message, sender)
	---------------------------------------------------------------
	-- if collide with another gift
	if message_id == MESSAGE.CONTACT and message.other_group == GAME.GIFT then --and (self.isOnGround or self.isGravityActive==false) then
		-- Build the other object URL from his ID
		local obj_url = msg.url(nil, message.other_id, "giftPrototype")

		-- Stop a gift to fall if :
		-- 	- the gift is still falling
		--	- the object it collides have the same Z axis
		--	- the object it collides is on the ground or is not falling (to stack the gift)
		if self.isGravityActive and go.get(obj_url, "z_index") == self.z_index
		and (go.get(obj_url, "isOnGround") or go.get(obj_url, "isGravityActive") == false) then
			self.isGravityActive = false
		end

		-- Apply compensation
		if go.get(obj_url, "z_index") == self.z_index then
			local comp = ResolveKinematicCollisions(self, message)
			go.set_position(go.get_position() + comp)
			self.collisionResolving = self.collisionResolving + comp
		end
	end

	---------------------------------------------------------------
	-- If collide with the ground
	if message_id == MESSAGE.COLLISION and message.other_group == GAME.BORDER then
		-- If collide with a ground border, the gift stop on it
		if message.other_id == hash("/bordergroundZ"..self.z_index) then
			self.isGravityActive= false
			self.isOnGround = true
		end

		-- If collide with a side border, stop the x movement
		if message.other_id == GAME.BORDER_LEFT then
			self.velocity.x = 0
			self.position.x = 30
		elseif message.other_id == GAME.BORDER_RIGHT then
			self.velocity.x = 0
			self.position.x = gameWidth/ZOOM_LEVEL - 30
		end
	end

	---------------------------------------------------------------
	-- Activate the gravity
	if message_id == hash("activate_gravity") then
		self.position = message.position
		self.swipe_from = message.swipe_from
		self.swipe_to = message.swipe_to

		-- Add a X movement when the user swipe the gift
		if self.swipe_from ~= nil and self.swipe_to ~= nil then
			self.velocity.x = (self.swipe_to.x - self.swipe_from.x) / self.swipe_force
		else
			self.velocity.x = 0
		end

		self.isGravityActive = true
		self.isOnGround = false
	end
end

function on_input(self, action_id, action) end
function final(self) end
function on_reload(self) end

-------------------------------------------------------------------------------------------------------------

-- Create a random gift
function CreateRandomGift(self)
	-- Choose a random type and color
	self.type = math.random(1,3)
	self.colorID = math.random(1,3)
	self.color = COLOR[self.colorID]

	-- Set the new animation name (= texture)
	msg.post("#sprite", "play_animation", { id = hash(self.color..self.type) })
end

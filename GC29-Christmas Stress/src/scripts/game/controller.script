--local defmath = require("defmath.defmath")	-- to use https://github.com/subsoap/defmath
require("src.scripts.utils.utils")

local TIMER_KEYBOARD = 0.2  -- delay between the player can stroke a key
local isTimerKeyboard = false

-------------------------------------------------------------------------------------------------------------

function init(self)
    msg.post(".", "acquire_input_focus")

    self.pressed = false
	self.collision_id = nil		-- GO's id which the cursor collided with
	self.dragged_id = nil		-- GO's id currently dragged
    self.cursor_position = vmath.vector3()

    self.stopDragging = false   -- to prevent the gift to be moved outside the screen
    self.forcedPosition = vmath.vector3()    -- to store the last position before the cursor go out the screen

    self.swipe_state = {}

    Swipe_Init(self)
end


function update(self, dt)
    self.collision_id = nil

    -- Stop the gift movement if the cursor is go throught screen borders
    Check_ScreenLimits(self)
end


function on_input(self, action_id, action)
    -- Display debug collision boxes
    if action_id == hash("debug_collision") and DEBUG_MODE and isTimerKeyboard == false then
        Debug_Tools(self, "COLLISION")
        isTimerKeyboard = true
        timer.delay(0.2, false, Reset_TimerKeyboard)
    end

    -- Move the object
    if not action_id or action_id == INPUT.TOUCH then
		-- Set the GO cursor position to be the same as the "real" cursor
        self.cursor_position.x = action.x / ZOOM_LEVEL
        self.cursor_position.y = action.y / ZOOM_LEVEL
        go.set_position(self.cursor_position)

        -- Detect a swipe
        Swipe(self, action)

        -- Move the object following the cursor
        Moving_Object(self, action)
    end
end


function on_message(self, message_id, message, sender)
	---------------------------------------------------------------
	-- If collide with a gift
    if message_id == MESSAGE.COLLISION and message.other_group == hash("gift") then
        -- Check if we are not already dragging an object
        if self.dragged_id == nil then
            -- Check if we are not already colliding with an object
            --      and select the object with the higher Z value
            if self.collision_id == nil or go.get_position(self.collision_id).z > message.other_position.z then
                self.collision_id = message.other_id
            end
        end
    end

	---------------------------------------------------------------
	-- If collide with a bag and we drag a gift
    if message_id == MESSAGE.COLLISION and message.other_group == hash("bag") and self.dragged_id ~= nil then
        -- Get the gift color
		local obj_url = msg.url(nil, self.dragged_id, "giftPrototype")
        local gift_color = go.get(obj_url, "colorID")

        -- Get the bag color
        -- Build the other object URL from his ID
		obj_url = msg.url(nil, message.other_id, "bag")
        local bag_color = go.get(obj_url, "color")

        -- Send informations to the Level Manager
        msg.post("/levelManager#levelManager", "gift_in_bag", { gift_color = gift_color, bag_color = bag_color, giftID = self.dragged_id })

        -- Reset values as the gift will be deleted
        self.pressed = false
        self.stopDragging = false
        self.dragged_id = nil
    end
end


function final(self) end
function on_reload(self) end

-------------------------------------------------------------------------------------------------------------

-- Move the object following the cursor
function Moving_Object(self, action)
    -- Detect if a press or release occurs
    if action.pressed and self.pressed == false then
        self.pressed = true
    end
    if action.released and self.dragged_id ~= nil and self.pressed == true then
        self.pressed = false

        -- The gift fall
        if self.stopDragging == false then
            if self.swipe_state.is_swipe then
                msg.post(self.dragged_id, "activate_gravity", { position = go.get_position(), swipe_from = self.swipe_state.swipe.from, swipe_to = self.swipe_state.swipe.to })
            else
                msg.post(self.dragged_id, "activate_gravity", { position = go.get_position() })
            end
        else
            -- If the cursor is outside the screen, send the forced position against the border
            if self.swipe_state.is_swipe then
                msg.post(self.dragged_id, "activate_gravity", { position = self.forcedPosition, swipe_from = self.swipe_state.swipe.from, swipe_to = self.swipe_state.swipe.to })
            else
                msg.post(self.dragged_id, "activate_gravity", { position = self.forcedPosition })
            end
        end

        self.stopDragging = false
        self.dragged_id = nil
    end

    -- If we are clicking and the GO collide with another GO
    if self.pressed and self.collision_id ~= nil then
        self.dragged_id = self.collision_id
    end

    if self.dragged_id and self.stopDragging == false then --and self.dragging then
        go.set_position(self.cursor_position, self.dragged_id)
    end
    if self.stopDragging then
        go.set_position(self.forcedPosition, self.dragged_id)
    end
end


-- Stop the gift movement if the cursor is go throught screen borders
function Check_ScreenLimits(self)
    -- Stop the gift movement if the cursor is go throught screen borders
    if self.dragged_id ~= nil then
        if self.cursor_position.x <= 30 then
            self.stopDragging = true
            self.forcedPosition.x = 30
            self.forcedPosition.y = self.cursor_position.y
        elseif self.cursor_position.x >= gameWidth/ZOOM_LEVEL - 30 then
            self.stopDragging = true
            self.forcedPosition.x = gameWidth/ZOOM_LEVEL - 30
            self.forcedPosition.y = self.cursor_position.y
        elseif self.cursor_position.y <= 20 then
            self.stopDragging = true
            self.forcedPosition.x = self.cursor_position.x
            self.forcedPosition.y = 20
        elseif self.cursor_position.y >= gameHeight/ZOOM_LEVEL - 10 then
            self.stopDragging = true
            self.forcedPosition.x = self.cursor_position.x
            self.forcedPosition.y = gameHeight/ZOOM_LEVEL - 10
        else
            self.stopDragging = false
        end
    end
end


function Reset_TimerKeyboard()
    isTimerKeyboard = false
end


function Swipe_Init(self)
    self.swipe_state.swipe_threshold = 50    -- minimum distance between a pressed and release action to consider it a swipe
	self.swipe_state.swipe_time = 0.3 --0.5        -- maximum time between a pressed and release action to consider it a swipe

    self.swipe_state.swipe = {
		from = vmath.vector3(),
		to = vmath.vector3(),
	}
    self.swipe_state.swipe_left = false
    self.swipe_state.swipe_right = false

    self.swipe_state.pressed = false
	self.swipe_state.pressed_position = nil
	self.swipe_state.pressed_time = nil
    self.swipe_state.is_swipe = false
end


function Swipe(self, action)
    self.swipe_state.swipe_left = false
    self.swipe_state.swipe_right = false
    self.swipe_state.is_swipe = false

    if action.pressed then
        -- Save cursor position and time
        self.swipe_state.pressed = true
        self.swipe_state.pressed_position = vmath.vector3(action.x, action.y, 0)
        self.swipe_state.pressed_time = socket.gettime()
    elseif action.released then
        -- Get cursor new position and time
        local dx = self.swipe_state.pressed_position and (self.swipe_state.pressed_position.x - action.x) or 0
        local dy = self.swipe_state.pressed_position and (self.swipe_state.pressed_position.y - action.y) or 0
        local ax = math.abs(dx)
        local ay = math.abs(dy)
        local distance = math.max(ax, ay)
        local time = socket.gettime() - (self.swipe_state.pressed_time or 0)

        -- Swipe if distance and time are higher to settings values
        --local is_swipe = distance >= self.swipe_state.swipe_threshold and time <= self.swipe_state.swipe_time
        local is_swipe = false
        if (distance >= self.swipe_state.swipe_threshold) and (time <= self.swipe_state.swipe_time) then
            is_swipe = true
        end

        if is_swipe then
            self.swipe_state.is_swipe = true

            -- Set direction
            if dx < 0 then  self.swipe_state.swipe_right = true
            else            self.swipe_state.swipe_left = true end

            self.swipe_state.swipe.from.x = self.swipe_state.pressed_position.x
            self.swipe_state.swipe.from.y = self.swipe_state.pressed_position.y
            self.swipe_state.swipe.to.x = action.x
            self.swipe_state.swipe.to.y = action.y
            self.swipe_state.swipe.time = time
        end

        self.swipe_state.pressed = false
    end
end


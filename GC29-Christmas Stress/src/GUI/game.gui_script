require("src.scripts.utils.utils")
local GAMESTATE = require("src.scripts.gamestate")

go.property("total_time", 0)

-------------------------------------------------------------------------------------------------------------

function init(self)
	-- Score
	gui.set_text(gui.get_node("score"), GAMESTATE.score)
	gui.set_scale(gui.get_node("score"), vmath.vector3(ZOOM_LEVEL,ZOOM_LEVEL,1))
	gui.set_position(gui.get_node("score"), vmath.vector3(10 * ZOOM_LEVEL, 110 * ZOOM_LEVEL,1))

	-- Time
	self.time = GAMESTATE.totalTime
	gui.set_text(gui.get_node("time"), self.time)
	gui.set_scale(gui.get_node("time"), vmath.vector3(ZOOM_LEVEL,ZOOM_LEVEL,1))
	gui.set_position(gui.get_node("time"), vmath.vector3(96 * ZOOM_LEVEL, 110 * ZOOM_LEVEL,1))

	-- Hide points (only display when the user put a gift in the bag)
	gui.set_enabled(gui.get_node("points"), false)
	gui.set_scale(gui.get_node("points"), vmath.vector3(ZOOM_LEVEL,ZOOM_LEVEL,1))
end


function on_message(self, message_id, message, sender)
	---------------------------------------------------------------
	-- Update the score
	if message_id == hash("update_score") then
		gui.set_text(gui.get_node("score"), GAMESTATE.score)

		-- Display point above the bag, animate and hide it
		local points = ""
		if message.points > 0 then points = "+"..message.points
		elseif message.points < 0 then points = message.points end
		gui.set_text(gui.get_node("points"), points)

		gui.set_position(gui.get_node("points"), message.bag_position)
		gui.set_enabled(gui.get_node("points"), true)
		gui.animate(gui.get_node("points"), "position.y", message.bag_position.y+20, gui.EASING_LINEAR, 1.0, 0, function ()
			gui.set_enabled(gui.get_node("points"), false)
		end)
	end

	---------------------------------------------------------------
	-- Add more time
	if message_id == hash("add_time") then
		self.time = self.time + message.time
	end

	---------------------------------------------------------------
	-- Start the timer
	if message_id == hash("start_timer") then
		timer.delay(1, true, function (self,pbar_timer,_)
			self.time = self.time - 1
			gui.set_text(gui.get_node("time"), self.time)

			if self.time <= 5 then
				sound.play("/sounds#timer_end")
			end

			if self.time <= 0 then
print("time = "..self.time)
				timer.cancel(pbar_timer)
				msg.post("/levelManager#levelManager", "timeout")
			end
		end)
	end
end

function update(self, dt) end
function on_input(self, action_id, action) end
function final(self) end
function on_reload(self) end